version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  python: circleci/python@1.0.0

commands:
  add-ssh-keys:
    description: Add ssh key to job
    steps:
      - add_ssh_keys:
          fingerprints:
            - "9f:5e:ee:81:23:e1:a8:7d:e2:29:b2:60:e9:14:1f:6b"

  create-env-file:
    description: Command used for creating backend environment file
    steps:
      - run:
          name: Add values to backend/env file
          command: |
            echo "NODE_ENV=development" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env

  destroy-environment:
    description: Command used for destroying the whole AWS infrastructure
    steps:
      - run:
          when: on_fail
          name: Delete all files in the current S3 bucket
          command: |
            if aws s3api head-bucket --bucket udapeople-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            fi
      - run:
          when: on_fail
          name: Destroy the CloudFormation Stacks
          command: |
            export TERM=xterm-color
            aws cloudformation delete-stack --stack-name cloud-devops-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name cloud-devops-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name cloud-devops-cloudfront
  
  revert-migration:
    description: Revert the last migration if smoke tests are failing in the current workflow
    steps:
      - run:
          when: on_fail
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - checkout
      - create-env-file
      - run:
          when: on_fail
          name: Load migration status from https://memstash.io/ and revert migrations if necessary
          command: |
            MIGRATION_STATUS=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/no_migrations_pending_<< pipeline.id >>)
            echo ${MIGRATION_STATUS}
            if [[ ${MIGRATION_STATUS} == 1 ]]
            then
              cd backend
              npm install
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && build
          command: |
            cd frontend
            npm install 
            npm run build
      - slack/status:
          fail_only: true

  build-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && build
          command: |
            cd backend
            npm install 
            npm run build
      - slack/status:
          fail_only: true
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && run tests
          command: |
            cd frontend
            npm install
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true

  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && run tests
          command: |
            cd backend
            npm install 
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && run analyze
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          fail_only: true

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && run analyze
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          fail_only: true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create Backend Stack
          command: |
            aws cloudformation create-stack \
            --template-body file://.circleci/files/backend.yml \
            --stack-name cloud-devops-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Install dependencies
          command: yum -y install tar gzip
      - run:
          name: Add Backend EC2 Instance DNS Name to Ansible Inventory
          when: on_success
          command: |
            sleep 60
            BACKEND_DNS_NAME=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            if [ -z "$BACKEND_DNS_NAME" ]; then
              echo "BACKEND_DNS_NAME is empty"
              exit 1
            fi
            echo "[backend]" > .circleci/ansible/inventory
            echo ${BACKEND_DNS_NAME} >> .circleci/ansible/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory
      - run:
          name: Create Frontend Stack
          command: |
            aws cloudformation create-stack \
            --template-body file://.circleci/files/frontend.yml \
            --stack-name cloud-devops-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
      - slack/status:
          fail_only: true

  configure-infrastructure:
    executor: python/default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add-ssh-keys
      - run:
          name: Install Ansible
          command: |
            pip install ansible==2.9.12
            ansible --version
            pip install awscli
      - run:
          name: Run ansible-playbook for backend server
          command: |
            cd .circleci/ansible
            ansible -u ubuntu -m ping backend -e 'ansible_python_interpreter=/usr/bin/python3'
            ansible-playbook server-configuration.yaml -e 'ansible_python_interpreter=/usr/bin/python3'
      - destroy-environment
      - slack/status:
          fail_only: true

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - create-env-file
      - run:
          name: Backend -> Run migrations and save status to https://memstash.io/
          command: |
            cd backend
            npm install
            npm run migrations > migrations.log
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
              --request PUT \
              --data $( grep -c "No migrations are pending" migrations.log ) \
              https://api.memstash.io/values/no_migrations_pending_<< pipeline.id >>
      - slack/status:
          fail_only: true

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Build the Front End
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            if [ -z "$BACKEND_IP" ]; then
              echo "BACKEND_IP is empty"
              exit 1
            fi
            cd frontend
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL=${API_URL}
            npm install
            npm run build
      - run: 
          name:  Copy compiled frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      - revert-migration
      - destroy-environment
      - slack/status:
          fail_only: true

  deploy-backend:
    executor: python/default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add-ssh-keys
      - run:
          command: |
            sudo apt update
            sudo apt install rsync
      - run:
          name: Install Ansible
          command: |
            pip install ansible==2.9.12
            ansible --version
            pip install awscli
      - create-env-file
      - run:
          name: Run ansible-playbook for backend server
          command: |
            cd .circleci/ansible
            ansible -u ubuntu -m ping backend -e 'ansible_python_interpreter=/usr/bin/python3'
            ansible-playbook deploy-backend.yaml -e 'ansible_python_interpreter=/usr/bin/python3'
      - revert-migration
      - destroy-environment
      - slack/status:
          fail_only: true

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - create-env-file
      - run:
          name: Run smoke test on frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Run smoke test on backend
          command: |
            BACKEND_DNS_NAME=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            if [ -z "$BACKEND_DNS_NAME" ]; then
              echo "BACKEND_DNS_NAME is empty"
              exit 1
            fi
            if curl -s "http://${BACKEND_DNS_NAME}:3030/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migration
      - destroy-environment
      - slack/status:
          fail_only: true

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update CloudFront Distribution
          no_output_timeout: 30m
          command: |
            export TERM=xterm-color
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

            echo Old Workflow Id: "${OLD_WORKFLOW_ID}"
            echo Stacks: "${STACKS}"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name cloud-devops-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            
            if [ -n "${OLD_WORKFLOW_ID}" ] && [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              echo "Delete old infrastructure"
              if aws s3api head-bucket --bucket udapeople-${OLD_WORKFLOW_ID}
              then
                aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID}/ --recursive
              fi
              aws cloudformation delete-stack --stack-name cloud-devops-frontend-${OLD_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name cloud-devops-backend-${OLD_WORKFLOW_ID}
            fi
      - destroy-environment
      - slack/status:
          fail_only: true

workflows:
  udapeople:
    jobs:
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
      - scan-frontend:
          requires:
            - build-frontend
      - build-backend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
              - test-frontend
              - test-backend
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
          filters:
            branches:
              only: master
      - run-migrations:
          requires:
            - configure-infrastructure
          filters:
            branches:
              only: master
      - deploy-backend:
          requires:
            - run-migrations
          filters:
            branches:
              only: master
      - deploy-frontend:
          requires:
            - configure-infrastructure
          filters:
            branches:
              only: master
      - smoke-test:
          requires:
           - deploy-backend
           - deploy-frontend
          filters:
            branches:
              only: master
      - cloudfront-update:
          requires:
              - smoke-test
          filters:
            branches:
              only: master

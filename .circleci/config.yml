version: 2.1

orbs:
  slack: circleci/slack@4.1.1
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "63cb433a-201e-4bad-ae0e-23c6c20d1ae2"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.te
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-<< pipeline.parameters.workflow-id >>
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    steps:
      # Trigger rollback jobs if the smoke tests or any following jobs fail.
      # Revert the last migration (IF a new migration was applied) on the database to that it goes back to the way it was before. You can use that value you saved in MemStash.io to know if you should revert any migrations.
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm cache clean --force
            npm i
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build  # -<< pipeline.id >>
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm cache clean --force
            npm i
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build  # -<< pipeline.id >>
      - save_cache:
          paths: [backend/dist]
          key: backend-dist  # -<< pipeline.id >>
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build"]  # -<< pipeline.id >>"
      - run:
          name: Font-end test
          command: |
            cd frontend
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]  # -<< pipeline.id >>"
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["frontend-build"]  # -<< pipeline.id >>"
      - run:
          name: Font-end security scan
          command: |
            cd frontend
            npm cache clean --force
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Back-end analyze
          command: |
            cd backend
            npm cache clean --force
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1b:71:26:50:58:14:a3:5d:a9:20:c5:13:fa:17:b9:7e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
            cd backend
            npm cache clean --force
            npm install
            npm run build
            npm audit fix
            npm run migrations > migration.log
            cat migration.log
            migration_status=$(cat migration.log | grep -c "has been executed successfully")
            if [ $migration_status > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: << pipeline.parameters.memstash-token >>" \
              --request PUT --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
            echo $API_URL
      - run:
          name: Build frontend
          command: |
            cd frontend
            ls -la
            cat .env
            npm run build
      - aws-cli/setup
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://udapeople-<< pipeline.parameters.workflow-id >>"
      - revert-migrations
      - destroy-environment    
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1b:71:26:50:58:14:a3:5d:a9:20:c5:13:fa:17:b9:7e"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip 
      - restore_cache:
          keys: ["backend-dist"]
      - run:
          name: Deploy backend
          command: |
            cd /home
            tar czf backend.tar.gz -P /home/circleci/project/backend/dist
      - run:
          name: Deploy backend 2
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            if curl -s https://${BACKEND_URL}:3030/api/status
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-<< pipeline.parameters.workflow-id >>.s3-website-eu-west-3.amazonaws.com"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - revert-migrations
      - destroy-environment 

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
            apk add --update curl
      - run:
          name: Save old workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "Old Workflow ID: ${OldWorkflowID}"
            curl -H "Content-Type: text/plain" \
              -H "token: << pipeline.parameters.memstash-token >>" \
              --request PUT --data 12345 https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID}
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
      - revert-migrations
      - destroy-environment

  cleanup:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID})
            echo "Old Workflow ID: ${OldWorkflowID}"
            if [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]

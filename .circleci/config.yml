version: 2.1

orbs:
  slack: circleci/slack@4.4.0

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "5203fb63-f5d6-42e8-9fc3-4e0d24b4767d"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack-name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.stack-name>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      project_name:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/<<parameters.project_name>>
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
              cd frontend && npm i && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build4
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend && npm i && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build4]
      - run:
          name: Run frontend unit test
          command: |
            cd frontend && npm run test   
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend unit test
          command: |
            cd backend && npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend && \
            npm audit fix --audit-level=critical --force
          # npm audit --audit-level=critical   
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend && \
            npm audit fix --audit-level=critical --force  
           # npm audit --audit-level=critical   
      - slack/notify:
          event: fail
          template: basic_fail_1


  deploy-infrastructure:
    docker:
      - image: cibuilds/aws:1.19
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
      - destroy-environment:
          stack-name: udapeople-backend-<< pipeline.parameters.workflow-id >>
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople
      - destroy-environment:
          stack-name: udapeople-frontend-<< pipeline.parameters.workflow-id >>
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[all]" > inventory && \
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udapeople" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          command: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  #configure-infrastructure:
  #  docker:
  #    - image: circleci/python:3.9
  #  steps:
  #    - checkout
  #    - add_ssh_keys:
  #        fingerprints: ["2f:a5:b5:03:e9:fa:77:d5:e3:7f:68:33:c3:cc:37:72"]
  #    - run:
  #        name: Install dependencies
  #        command: |
  #          pip3 install ansible --user 
  #    - attach_workspace:
  #        at: ~/
  #    - run:
  #        command: cat .circleci/ansible/inventory.txt
  #    - run:
  #        name: Configure server
  #        command: |
  #          echo ENVIRONMENT=production > "backend/.env"
  #          echo TYPEORM_CONNECTION=postgres >> "backend/.env"
  #          echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
  #          echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
  #          echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
  #          echo NODE_ENV=production >> "backend/.env"
  #          echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
  #          echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
  #          echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
  #          echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
  #          echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
  #          ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
  #    - run:
  #        name: Install AWS CLI for rollback
  #        when: on_fail
  #        command: |
  #          pip3 install --upgrade pip && pip3 install awscli
  #    - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - test-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - deploy-infrastructure:
          context: slack-secrets
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
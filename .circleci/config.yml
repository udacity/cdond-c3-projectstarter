version: 2.1

orbs:
  slack: circleci/slack@3.4.2

commands:
  destroy-environment:
    description: Reusable command used for destroying the CloudFormation Stack
    parameters:
      stack-name:
        type: string
        default: StackName
    steps:
      - run:
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.stack-name >>
#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && build
          command: |
            cd frontend
            npm install 
            npm run build
      - slack/status:
          fail_only: true

  build-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && build
          command: |
            cd backend
            npm install 
            npm run build
      - slack/status:
          fail_only: true
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && run tests
          command: |
            cd frontend
            npm install
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true

  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && run tests
          command: |
            cd backend
            npm install 
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && run analyze
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          fail_only: true

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && run analyze
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          fail_only: true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create Backend Stack
          command: |
            aws cloudformation create-stack \
            --template-body file://.circleci/files/backend.yml \
            --stack-name cloud-devops-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Store Backend URL
          when: on_success
          command: |
            sleep 60
            BACKEND_DNS_NAME=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
               --request PUT \
               --data ${BACKEND_DNS_NAME} \
               https://api.memstash.io/values/backend_dns_name
      - destroy-environment:
          stack-name: cloud-devops-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Create Frontend Stack
          command: |
            aws cloudformation create-stack \
            --template-body file://.circleci/files/frontend.yml \
            --stack-name cloud-devops-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          stack-name: cloud-devops-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Create CloudFront Stack
          command: |
            aws cloudformation create-stack \
              --template-body file://.circleci/files/cloudfront.yml \
              --stack-name cloud-devops-cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          stack-name: cloud-devops-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
      - slack/status:
          fail_only: true

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "51:3c:9b:f2:e2:b8:53:fe:5c:95:be:ea:ff:85:40:42"
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Install curl
          command: apk add curl
      - run:
          name: Run ansible-playbook for backend server
          command: |
            pwd
            BACKEND_DNS_NAME=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/backend_dns_name)
            echo ${BACKEND_DNS_NAME}
            echo ${BACKEND_DNS_NAME} >> .circleci/ansible/inventory
            cd .circleci/ansible
            pwd
            cat inventory
            ansible-inventory --list
            ansible -u ubuntu -m ping backend
      - slack/status:
          fail_only: true
      # - run:
      #     name: Install NodeJs
      #     command: |
      #       curl -sL https://deb.nodesource.com/setup_12.x | -E bash -
      #       apt install -y nodejs
#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  # frontend:
  #   jobs:
  #     - build-frontend
  #     - test-frontend:
  #         requires:
  #             - build-frontend
  #     - scan-frontend:
  #         requires:
  #             - test-frontend
  # backend:
  #   jobs:
  #     - build-backend
  #     - test-backend:
  #         requires:
  #           - build-backend
  #     - scan-backend:
  #         requires:
  #           - test-backend
  infrastructure:
    jobs:
      - configure-infrastructure
      #- deploy-infrastructure
      # - configure-infrastructure:
      #     requires:
      #         - deploy-infrastructure


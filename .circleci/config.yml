version: 2.1

orbs:
  slack: circleci/slack@4.3.1

commands:

  slack-notify-fail:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  slack-notify-pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  npm-install-build:
    parameters:
      project_directory:
        type: string
    steps:
      - run:
          name: Install and Build in project directory "<< parameters.project_directory >>"
          working_directory: "<< parameters.project_directory >>"
          command: |
            npm i
            npm run build

  npm-test:
    parameters:
      project_directory:
        type: string
    steps:
      - run:
          name: Run tests in project directory "<< parameters.project_directory >>"
          working_directory: "<< parameters.project_directory >>"
          command: |
            npm run test

  npm-force-critical-fix:
    parameters:
      project_directory:
        type: string
    steps:
      - run:
          name: Scan dependencies and fix in project directory "<< parameters.project_directory >>"
          working_directory: "<< parameters.project_directory >>"
          command: |
            npm audit fix --audit-level=critical --force

  deploy-aws-cloudformation:
    parameters:
      template_file:
        type: string
      stack_name:
        type: string
      parameter_overrides:
        type: string
      tags:
        type: string
      description:
        type: string
    steps:
      - run:
          name: "<< parameters.description >>"
          command: |
            aws cloudformation deploy \
                --template-file "<< parameters.template_file >>" \
                --stack-name "<< parameters.stack_name >>" \
                --parameter-overrides "<< parameters.parameter_overrides >>" \
                --tags "<< parameters.tags >>"

  memstash-put:
    parameters:
      data:
        type: string
      key:
        type: string
    steps:
      - run:
          name: PUT Memstash
          command: |
            curl -H "Content-Type: text/plain" \
                 -H "token: ${MEMSTASH_TOKEN}" \
                 --request PUT \
                 --data "<< parameters.data >>" \
                 "https://api.memstash.io/values/<< parameters.key >>"

  memstash-get:
    parameters:
      key:
        type: string
    steps:
      - run:
          name: GET Memstash
          command: |
            curl -H "token: ${MEMSTASH_TOKEN}" \
                 --request GET \
                 "https://api.memstash.io/values/<< parameters.key >>"

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks.
    parameters:
      backend_stack_name:
        type: string
      frontend_bucket_name:
        type: string
      frontend_stack_name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
                --stack-name "<< parameters.backend_stack_name >>"

            aws s3 rm "s3://<< parametersfrontend_bucket_name >>" --recursive

            aws cloudformation delete-stack \
                --stack-name "<< parameters.frontend_stack_name >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      db_migration_key:
        type: string
        default: "db-migration-${CIRCLE_WORKFLOW_ID}"
      backend_directory:
        type: string
        default: "~/project/backend"
    steps:
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: "<< parameters.backend_directory >>"
          command: |
            export SUCCESS="$(curl -H "token: ${MEMSTASH_TOKEN}" \
                                   --request GET \
                                   "https://api.memstash.io/values/<< parameters.db_migration_key >>")"
            if(( $SUCCESS==1 ))
            then
              echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" > .env
              echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
              echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
              echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
              echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
              echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
              echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> .env
              echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
              echo "TYPEORM_ENTITIES=./src/modules/**/*.entity.ts" >> .env
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
      - npm-install-build:
          project_directory: frontend
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build-{{ checksum "frontend/package-lock.json" }}
      - slack-notify-fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
      - npm-install-build:
          project_directory: backend
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build-{{ checksum "backend/package-lock.json" }}
      - slack-notify-fail


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      - npm-test:
          project_directory: frontend
      - slack-notify-fail

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - npm-test:
          project_directory: backend
      - slack-notify-fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      - npm-force-critical-fix:
          project_directory: frontend
      - slack-notify-fail

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - npm-force-critical-fix:
          project_directory: backend
      - slack-notify-fail

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
#      - checkout
#      - run: yum -y install jq tar gzip
#
#      - deploy-aws-cloudformation:
#          template_file: ".circleci/files/backend.yml"
#          stack_name: "backend-${CIRCLE_WORKFLOW_ID}"
#          parameter_overrides: "ID=${CIRCLE_WORKFLOW_ID}"
#          tags: "project=udapeople"
#          description: Ensure back-end infrastructure exists

      - memstash-put:
          data: "$(aws ec2 describe-instances \
                  --filters Name=tag:project,Values=udapeople \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)"
          key: "backend-ip-${CIRCLE_WORKFLOW_ID}"

#      - deploy-aws-cloudformation:
#          template_file: ".circleci/files/frontend.yml"
#          stack_name: "frontend-${CIRCLE_WORKFLOW_ID}"
#          parameter_overrides: "ID=${CIRCLE_WORKFLOW_ID}"
#          tags: "project=udapeople"
#          description: Ensure front-end infrastructure exists
#
#      - run:
#          name: Add back-end ip to ansible inventory
#          command: |
#            aws ec2 describe-instances \
#              --query 'Reservations[*].Instances[*].PublicIpAddress' \
#              --filters Name=tag:project,Values=udapeople \
#              --output text >> .circleci/ansible/inventory.txt
#
#      - persist_to_workspace:
#          root: ~/
#          paths:
#            - project/.circleci/ansible/inventory.txt
#      - slack-notify-fail
#       Here's where you will add some code to rollback on failure
#
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "50:d5:1c:e8:b9:43:d9:30:82:32:2a:b1:99:12:19:dd"
      - attach_workspace:
          at: ~/
      - run:
          command: |
            apk add --update ansible jq curl
            cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - slack-notify-fail
#      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - run:
          name: Run DB migrations
          working_directory: backend
          command: |
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> .env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> .env
            echo "TYPEORM_ENTITIES=./src/modules/**/*.entity.ts" >> .env
            cat .env
            npm run migrations:revert
            npm run migrations > migration-result-${CIRCLE_WORKFLOW_ID}
            cat migration-result-${CIRCLE_WORKFLOW_ID}
            if grep "has been executed successfully" migration-result-${CIRCLE_WORKFLOW_ID}
            then
              curl -H "Content-Type: text/plain" \
                   -H "token: ${MEMSTASH_TOKEN}" \
                   --request PUT \
                   --data "1" \
                   "https://api.memstash.io/values/db-migration-${CIRCLE_WORKFLOW_ID}"
            fi
      - slack-notify-fail

#     # Here's where you will add some code to rollback on failure
#
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            curl --silent "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" --output "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-

      - run:
          name: Deploy frontend objects
          working_directory: frontend
          command: |
            export BACKEND_IP="$(aws ec2 describe-instances \
                --filters Name=tag:project,Values=udapeople \
                --query "Reservations[*].Instances[*].PublicDnsName" \
                --output text)"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm run build
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID}
      - revert-migrations
      - slack-notify-fail

#      # Here's where you will add some code to rollback on failure
#
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "50:d5:1c:e8:b9:43:d9:30:82:32:2a:b1:99:12:19:dd"
      - attach_workspace:
          at: ~/
      - run:
          command: |
            apk add --update ansible jq curl tar
            cat ~/project/.circleci/ansible/inventory.txt
#      - restore_cache:
#          keys:
#            - backend-build-{{ checksum "backend/package-lock.json" }}
#            - backend-build-
      - run:
          name: tar backend directory
          command: |
            tar czf backend.tar.gz backend

      - run:
          name: Deploy backend
          working_directory: .circleci/ansible
          command: |
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - slack-notify-fail
#       Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          command: |
            apk add --update jq curl

      - run:
          name:  Backend smoke test.
          command: |
            export BACKEND_IP="$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET "https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID}")"
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo ${API_URL}
            if curl -s ${API_URL} | grep \"status\":\"ok\"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-50b13c56-8d83-4e4e-b588-13af2c7ea71b.s3-website-us-east-1.amazonaws.com"
            echo ${URL}
            if curl ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations
      - slack-notify-fail
#      # Here's where you will add some code to rollback on failure
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure

#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#

workflows:
  default:
    jobs:
#      - build-frontend:
#          context: slack-secrets
#      - build-backend:
#          context: slack-secrets
#      - test-frontend:
#          context: slack-secrets
#          requires: [build-frontend]
#      - test-backend:
#          context: slack-secrets
#          requires: [build-backend]
#      - scan-frontend:
#          context: slack-secrets
#          requires: [build-frontend]
#      - scan-backend:
#          context: slack-secrets
#          requires: [build-backend]
#      - deploy-infrastructure:
#          context:
#            - aws-secrets
#            - slack-secrets
#            - memstash-secrets
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#          context:
#            - slack-secrets
      - run-migrations:
#          requires: [configure-infrastructure]
          context:
            - slack-secrets
            - memstash-secrets
#      - deploy-frontend:
#          context:
#            - aws-secrets
#            - slack-secrets
#          requires: [run-migrations]
#      - deploy-backend:
#          context:
#            - slack-secrets
#          requires: [run-migrations]
      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
          requires: [run-migrations]
          context:
            - slack-secrets
            - memstash-secrets
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
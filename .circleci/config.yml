version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}     
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Example: kvdb.io
            SUCCESS=$(curl --insecure https://kvdb.io/KkHrY1ugEUMgGYsBS1XW1D/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
    
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
    
      - run:
          name: test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: test backend
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
    
      - run:
          name: scan frontend
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      
      - run:
          name: scan backend
          command: |
             # Your code here
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    #working_directory: /app
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install tar gzip
          command: |
            yum update -y
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |  # remember to replase 873246932740 to CIRCLE_WORKFLOW_ID
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      
      #- run: mkdir -p ~/workspace
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            #echo "[web]"> /workspace/inventory.txt
            #cd .circleci/ansible
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress[]" \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            pwd
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure   
      - destroy-environment
  configure-infrastructure:
    #working_directory: /app
    docker:
      - image: circleci/python:3.6.2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "52:5f:5d:3e:01:11:db:50:f7:49:21:f7:2c:86:89:18"
      
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo python3 -m pip install -U pip
            #sudo apt update
            #sudo apt upgrade
            sudo python -m pip install ansible
            sudo apt install software-properties-common --force-yes
            # sudo add-apt-repository --yes ppa:ansible/ansible 
            # sudo apt update
            # sudo apt install ansible --yes
            sudo apt install tar gzip --yes
            # sudo apt install -yy less
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # sudo unzip awscliv2.zip
            # sudo ./aws/install
            sudo apt install awscli --yes
            #sudo systemd daemon-reload 
            #ls /app

      # - run:
      #     name: Configure server
      #     command: |
      #       cd .circleci/ansible
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Configure server
          command: |
            #cd /root/project/.circleci/ansible/
            #cd .circleci/ansible
            #cat inventory.txt
            pwd
            #ls project/
            cat ~/project/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            pwd
            ansible-playbook -i "/home/circleci/project/.circleci/ansible/inventory.txt" configure-server.yml
      # Here's where you will add some code to rollback on failure     
      - destroy-environment 
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      # retrieving the build cache from the backend analyze job.
      # - restore_cache:
      #     keys: [backend-build]
      - run:
          name: Install aws dependencies
          command: |
            #&& sudo apt install -yy less
            sudo apt update 
            sudo apt install awscli --yes
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            # npm audit fix --audit-level=critical --force
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using kvdb.io, generate the bucket ID "KkHrY1ugEUMgGYsBS1XW1D" in your local terminal first
              curl https://kvdb.io/KkHrY1ugEUMgGYsBS1XW1D/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - destroy-environment 
  
  deploy-frontend:
    docker:
    # docker image that supoorts AWS CLI
      - image: python:3.7-alpine3.11
    steps: 
      - checkout
      - run: 
          name: install dependencies 
          command: |
            
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress[]" \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["52:5f:5d:3e:01:11:db:50:f7:49:21:f7:2c:86:89:18"]

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apk add tar gzip --yes
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      
      - run: 
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            #ansible-playbook -i inventory.txt deploy-backend.yml
            ls -la
            ansible-playbook -i "/home/circleci/project/.circleci/ansible/inventory.txt" deploy-backend.yml

      - revert-migrations
      - destroy-environment  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
        - checkout
        - run: 
            name: install dependencies
            command: |
              apk add --update curl
              pip3 install awscli
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:project,Values=udapeople" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
            
              export API_URL=http://$BACKEND_IP:3030
              echo $API_URL >> frontend/.env
              echo $API_URL
        - run:
            name: Backend smoke test.
            command: |
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi    
        - run:
            name: Frontend smoke test.
            command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 1
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure  
        - revert-migrations
        - destroy-environment 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Wait for the cf stack to complete
          command : sleep 300 
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"          
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Empty old S3 bucket and delete old frontend stack"
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-prod-${OldWorkflowID}
              echo "Delete old backend stack"
              aws cloudformation delete-stack --stack-name udapeople-backend-prod-${OldWorkflowID} 
              echo "stack deleted succesfully"
            else
              echo " No clean up "
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
              
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
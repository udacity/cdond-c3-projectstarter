version: 2.1

orbs:
  slack: circleci/slack@4.3.0

commands:
  notify-failure:
    description: Slack notification on failure
    steps:
      - slack/notify:
          event: fail
          custom: |
            {"blocks": [{"type": "section", "text": { "type": "mrkdwn", "text": "❌ Failed in build <$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM> ($CIRCLE_BRANCH) of <$CIRCLE_REPOSITORY_URL|$CIRCLE_PR_REPONAME>\n - $CIRCLE_USERNAME: $CIRCLE_PULL_REQUEST ($CIRCLE_SHA1)"}}]}
  notify-success:
    description: Slack notification on pass
    steps:
      - slack/notify:
          event: pass
          custom: |
            { "blocks": [
                { "type": "section", "fields": [ {"type": "mrkdwn", "text": "✅ Build Succeded <$CIRCLE_BUILD_URL|$CIRCLE_BUILD_NUM> ($CIRCLE_BRANCH) of <$CIRCLE_REPOSITORY_URL|$CIRCLE_PR_REPONAME>\n - $CIRCLE_USERNAME: $CIRCLE_PULL_REQUEST ($CIRCLE_SHA1)", "emoji": true }]}]}

#  destroy-environment:
#    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
#      # Add parameter here   
#    steps:
#      - run:
#          name: Destroy environments
#          when: on_fail
#          command: |
#            # Your code here
#            exit 1
#
#  revert-migrations:
#    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
#      # Add parameter here     
#    steps:
#      - run:
#          name: Revert migrations
#          # Add when this will run
#          command: |
#            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#            SUCCESS = 1
#            if(( $SUCCESS==1 )); 
#            then
#            #  cd ~/project/backend
#            #  npm install
#            #  Add revert code here. You can find this in the Getting Started section.
#              exit 1
#            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-{{ checksum "package-lock.json" }}
            - frontend-build-
      - run:
          name: Build front-end
          command: |
            cd frontend
            echo 'API_URL=http://localhost:3030' > .env
            npm install
            npm run build
      - notify-failure
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "package-lock.json" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "package-lock.json" }}
            - backend-build-
      - run:
          name: Back-end build
          command: |
             cd backend
             cp .env.sample .env
             npm install 
             npm run build
      - notify-failure
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-{{ checksum "package-lock.json" }}

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
            - frontend-build-
      - run:
          name: Run frontend unit tests
          command: |
             cd frontend
             npm run test
      - notify-failure
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "package-lock.json" }}
            - backend-build-
      - run:
          name: Run backend unit tests
          command: |
             cd backend
             npm run test
      - notify-failure
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
            - frontend-build-
      - run:
          name: Run backend unit tests
          command: |
             cd backend
             npm audit --audit-level=critical
             exit 1
      - notify-failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "package-lock.json" }}
            - backend-build-
      - run:
          name: Run backend unit tests
          command: |
             cd backend
             npm audit --audit-level=critical
      - notify-failure

##  deploy-infrastructure:
##    docker:
##      # Docker image here that supports AWS CLI
##    steps:
##      # Checkout code from git
##      - run:
##          name: Ensure back-end infrastructure exists
##          command: |
##            aws cloudformation deploy \
##              --template-file .circleci/files/backend.yml \
##              #--tags project=your-tag \
##              # --stack-name "your back-end stack name with workflow id" \
##              # --parameter-overrides ID="your workflow id"  
##              exit 1
##      - run:
##          name: Ensure front-end infrastructure exist
##          command: |
##            aws cloudformation deploy \
##              --template-file .circleci/files/frontend.yml \
##              #--tags project=your-tag \
##              # --stack-name "your front-end stack name with workflow id" \
##              # --parameter-overrides ID="your workflow id"  
##              exit 1
##      - run:
##          name: Add back-end ip to ansible inventory
##          command: |
##            # Your code here
##            exit 1
##      - persist_to_workspace:
##          root: ~/
##          paths:
##            - project/.circleci/ansible/inventory.txt
##      # Here's where you will add some code to rollback on failure      
##
##  configure-infrastructure:
##    docker:
##      # Docker image here that supports Ansible
##    steps:
##      # Checkout code from git
##      # Add ssh keys with fingerprint
##      # attach workspace
##      - run:
##          name: Install dependencies
##          command: |
##            # Your code here
##            exit 1
##      - run:
##          name: Configure server
##          command: |
##            # Your code here
##            exit 1
##      # Here's where you will add some code to rollback on failure      
##
##  run-migrations:
##    docker:
##      # Docker image here that supports NodeJS
##    steps:
##      # Checkout code from git
##      - run:
##          name: Run migrations
##          command: |
##            # Your code here
##            exit 1
##      - run:
##          name: Send migration results to memstash
##          command: |
##            # Your code here
##            exit 1
##     # Here's where you will add some code to rollback on failure      
##
##  deploy-frontend:
##    docker:
##      # Docker image here that supports AWS CLI
##    steps:
##      # Checkout code from git
##      - run:
##          name: Install dependencies
##          command: |
##            # your code here
##      - run:
##          name: Get backend url
##          command: |
##            # your code here
##            export API_URL="http://${BACKEND_IP}:3030"
##            echo "${API_URL}"
##      - run:
##          name: Deploy frontend objects
##          command: |
##            # your code here
##      # Here's where you will add some code to rollback on failure      
##                    
##  deploy-backend:
##    docker:
##      # Docker image here that supports Ansible
##    steps:
##      # Checkout code from git
##      # Add ssh keys with fingerprint
##      # attach workspace
##      - run:
##          name: Install dependencies
##          command: |
##            # your code here
##      - run:
##          name: Deploy backend
##          command: |
##            # your code here
##      # Here's where you will add some code to rollback on failure  
##
##  smoke-test:
##    docker:
##      # Lightweight Docker image 
##    steps:
##      # Checkout code from git
##      - run:
##          name: Install dependencies
##          command: |
##            # your code here
##      - run:
##          name: Get backend url
##          command: |
##            # your code here
##      - run:
##          name: Backend smoke test.
##          command: |
##            # your code here
##      - run:
##          name: Frontend smoke test.
##          command: |
##            # your code here
##      # Here's where you will add some code to rollback on failure  
##
##  cloudfront-update:
##    docker:
##      # Docker image here that supports AWS CLI
##    steps:
##      # Checkout code from git
##      - run:
##          name: Install dependencies
##          command: |
##            # your code here
##      - run:
##          name: Update cloudfront distribution
##          command: |
##            # your code here
##      # Here's where you will add some code to rollback on failure  
##
##cleanup:
##    docker:
##      # Docker image here
##    steps:
##      # Checkout code from git
##      - run:
##          name: Get old stack workflow id
##          command: |
##            # your code here
##            export OldWorkflowID="the id here"
##            export STACKS=[] #put the list of stacks here
##      - run:
##          name: Remove old stacks and files
##          command: |
##            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
##            then
##              # your code here
##            fi
##            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
##      - deploy-infrastructure:
##          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
##          filters:
##            branches:
##              only: [test-feature-branch]
##      - configure-infrastructure:
##          requires: [deploy-infrastructure]
##      - run-migrations:
##          requires: [configure-infrastructure]
##      - deploy-frontend:
##          requires: [run-migrations]
##      - deploy-backend:
##          requires: [run-migrations]
##      - smoke-test:
##          requires: [deploy-backend, deploy-frontend]
##      - cloudfront-update:
##          requires: [smoke-test]
##      - cleanup:
##          requires: [cloudfront-update]
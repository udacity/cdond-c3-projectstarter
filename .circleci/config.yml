version: 2.1

orbs:
  slack: circleci/slack@4.3.1

commands:
  slack-notify-fail:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  slack-notify-pass:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  memstash-put:
    parameters:
      data:
        type: string
      key:
        type: string
    steps:
      - run:
          name: PUT Memstash
          command: |
            curl -H "Content-Type: text/plain" \
                 -H "token: ${MEMSTASH_TOKEN}" \
                 --request PUT \
                 --data "<< parameters.data >>" \
                 "https://api.memstash.io/values/<< parameters.key >>"

  memstash-get:
    parameters:
      key:
        type: string
    steps:
      - run:
          name: GET Memstash
          command: |
            curl -H "token: ${MEMSTASH_TOKEN}" \
                 --request GET \
                 "https://api.memstash.io/values/<< parameters.key >>"

#  destroy-environment:
#    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
#       Add parameter here
#    steps:
#      - run:
#          name: Destroy environments
#          when: on_fail
#          command: |
#             Your code here
#            exit 1
#
#  revert-migrations:
#    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
      # Add parameter here     
#    steps:
#      - run:
#          name: Revert migrations
          # Add when this will run
#          command: |
#             Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#            SUCCESS = 1
#            if(( $SUCCESS==1 ));
#            then
        #  cd ~/project/backend
        #  npm install
        #  Add revert code here. You can find this in the Getting Started section.
#        exit 1
#        fi

jobs:
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-build-{{ checksum "backend/package-lock.json" }}
      - slack-notify-fail

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - run:
          name: Run Back-end tests
          command: |
            cd backend
            npm run test
      - slack-notify-fail

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "backend/package-lock.json" }}
            - backend-build-
      - run:
          name: Run Back-end scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack-notify-fail

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build-{{ checksum "frontend/package-lock.json" }}
      - slack-notify-fail

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      - run:
          name: Run front-end tests
          command: |
            cd frontend
            npm run test
      - slack-notify-fail

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "frontend/package-lock.json" }}
            - frontend-build-
      - run:
          name: Run front-end scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack-notify-fail

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install jq tar gzip
#      - run:
#          name: Ensure back-end infrastructure exists
#          command: |
#            aws cloudformation deploy \
#              --template-file .circleci/files/backend.yml \
#              --tags project=udapeople \
#              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
#              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - memstash-put:
          data: "$(aws ec2 describe-instances --filters Name=tag:project,Values=udapeople --query 'Reservations[0].Instances[0].PublicDnsName' --output text)"
          key: "backend-url-${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack-notify-fail
      - slack-notify-pass
##       Here's where you will add some code to rollback on failure
#
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "50:d5:1c:e8:b9:43:d9:30:82:32:2a:b1:99:12:19:dd"
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible dependency
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/inventory.txt ./.circleci/ansible/configure-server.yml
#      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > ~/migration-result-${CIRCLE_WORKFLOW_ID}
            cat ~/migration-result-${CIRCLE_WORKFLOW_ID} | grep "has been executed successfully"
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
                 -H "token: ${MEMSTASH_TOKEN}" \
                 --request PUT \
                 --data "value" \
                 https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}

#     # Here's where you will add some code to rollback on failure
#
#  deploy-frontend:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#      - run:
#          name: Deploy frontend objects
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  deploy-backend:
#    docker:
#      # Docker image here that supports Ansible
#    steps:
#      # Checkout code from git
#      # Add ssh keys with fingerprint
#      # attach workspace
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Deploy backend
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  smoke-test:
#    docker:
#      # Lightweight Docker image
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Get backend url
#          command: |
#            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure
#
#  cloudfront-update:
#    docker:
#      # Docker image here that supports AWS CLI
#    steps:
#      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
#            # your code here
#      # Here's where you will add some code to rollback on failure

#cleanup:
#    docker:
#      # Docker image here
#    steps:
#      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
#            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
#              # your code here
#            fi
#

workflows:
  default:
    jobs:
#      - build-frontend:
#          context: slack-secrets
#      - build-backend:
#          context: slack-secrets
#      - test-frontend:
#          context: slack-secrets
#          requires: [build-frontend]
#      - test-backend:
#          context: slack-secrets
#          requires: [build-backend]
#      - scan-frontend:
#          context: slack-secrets
#          requires: [build-frontend]
#      - scan-backend:
#          context: slack-secrets
#          requires: [build-backend]
      - deploy-infrastructure:
          context:
            - aws-secrets
            - slack-secrets
            - memstash-secrets
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
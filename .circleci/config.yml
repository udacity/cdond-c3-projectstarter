version: 2.1

# Note to developers:
# Dependencies can be best figured out by using runing the respective containers in docker on your local machine. 

orbs:
  slack: circleci/slack@4.4.2
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          command: |
            aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name backend-${CIRCLE_WORKFLOW_ID}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name frontend-${CIRCLE_WORKFLOW_ID}
          when: on_fail


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

  install-npm-dependecies:
    description: "Install NPM dependencies"
    parameters:
      path:
        type: string
        default: ""
    steps:
      - run:
          name: Install npm
          command: |
            cd << parameters.path>>
            npm install

  build-package:
    description: "Build package"
    parameters:
      path:
        type: string
        default: ""
    steps:
      - run:
          name: Build package
          command: |
            cd << parameters.path >>
            npm run build

  run-test:
    description: "Run unit tests"
    parameters:
      path:
        type: string
        default: "."
    steps:
      - run:
          name: Run unit test
          command: |
            cd << parameters.path >>
            npm run test

  run-scan:
    description: "Vulnerability scan"
    parameters:
      path:
        type: string
        default: ""
    steps:
      - run:
          name: Scan the code for vulnerabilities
          command: |
            cd << parameters.path >>
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force

  notify:
    description: "Send a notification using Slack"
    steps:
      - slack/notify:
          event: fail
          channel: 'udapeople-project'
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: 'udapeople-project'
          template: success_tagged_deploy_1   
  
  configure_docker_image:
    steps:
      - run:
          name: Configure the docker image
          command: |
            yum install -y tar && \
            yum install -y sudo && \
            ls -al /bin/sh && \
            sudo rm /bin/sh && \
            sudo ln -s /bin/bash /bin/sh && \
            ls -al /bin/sh

  configure_aws_image_w_nodejs:
    steps:
      - run:
          name: Configure the docker image
          command: |
            sudo yum update
            curl -fsSL https://rpm.nodesource.com/setup_current.x | bash -
            yum install -y nodejs
  
  configure_alpine_image_w_aws:
    steps:
      - run:
          name: Configure the docker image
          command: |
            apk add --no-cache
            pip install awscliv2  && awscliv2 -i
#END COMMANDS#

#START JOBS#        
jobs:
  build-frontend:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - install-npm-dependecies:
          path: frontend
      - build-package:
          path: frontend
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install-npm-dependecies:
          path: backend
      - build-package:
          path: backend
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - install-npm-dependecies:
          path: frontend
      - run-test:
          path: frontend
         
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install-npm-dependecies:
          path: backend
      - run-test:
          path: backend

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - install-npm-dependecies:
          path: frontend
      - run-scan:
          path: frontend
      - notify

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install-npm-dependecies:
          path: backend
      - run-scan:
          path: backend
      - notify

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --region ${AWS_DEFAULT_REGION} \
            --filters "Name=tag:Name",Values="backend-${CIRCLE_WORKFLOW_ID}" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
      - configure_docker_image
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project/.circleci/ansible/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure 
      - when:
          condition: on_fail
          steps:
            - destroy-environment

  store-backend-ip:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - configure_docker_image
      - run: mkdir -p /tmp/workspace/
      - run:
          name: Persist public DNS of EC2 instance on MemStash
          command: |
            aws ec2 describe-instances \
            --region us-west-1 \
            --filters "Name=tag:Name",Values="backend-5dd387f3-7232-40ed-bf0c-e8267452f93f" \
            --query "Reservations[*].Instances[0].PublicDnsName" \
            --output text > /tmp/workspace/env-vars
            BACKEND_IP=$(cat /tmp/workspace/env-vars)
            echo $BACKEND_IP
            curl -H "Content-Type: text/plain" -H "token: backend-ip-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$(echo $BACKEND_IP)" https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID}
      
  check-var-example:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace/
      - run: BACKEND_PUBLIC_DNS=$(cat /tmp/workspace/env-vars) && echo $BACKEND_PUBLIC_DNS
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      # https://docs.ansible.com/ansible/latest/reference_appendices/config.html
      # https://github.com/radekg/terraform-provisioner-ansible/issues/98
      ANSIBLE_HOST_KEY_CHECKING: False
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - run: cat ~/project/.circleci/ansible/inventory.txt 
      - add_ssh_keys:
          fingerprints: ["ba:87:73:66:22:41:7d:24:d5:9a:67:3f:6e:75:39:55"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
      - run:
          name: Configure server
          # https://stackoverflow.com/questions/53126057/using-yes-with-interactive-script-results-in-exit-code-141/53126200
          command:
            # printenv >> ./backend/.env
            cd .circleci/ansible/ && cat inventory.txt && ls -a && ansible-playbook -i inventory.txt configure-server.yml
      - run: apk add python curl && curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && unzip awscliv2.zip && ./aws/install
      - destroy-environment
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # - run: npm audit fix --audit-level=critical
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend && npm install 
            npm run build
            mkdir -p /tmp/workspace/
            npm run migrations > /tmp/workspace/migration
            RESULT=$(cat /tmp/workspace/migration)
            curl -H "Content-Type: text/plain" -H "token: migration-result-${CIRCLE_WORKFLOW_ID}" --request PUT --data "$(echo $RESULT)" https://api.memstash.io/values/migration-result-${CIRCLE_WORKFLOW_ID}
      - run:
          name: PUT migration results to memstash
          command: |
            MIGRATION_RESULT=$(curl -H "token: migration-result-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration-result-${CIRCLE_WORKFLOW_ID})
            if echo "$MIGRATION_RESULT" | grep "has been executed successfully"
            then
              curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "SUCCESS"
            else
              curl -H "Content-Type: text/plain" -H "token: migration-${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "FAIL"
            fi
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - configure_docker_image
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["ba:87:73:66:22:41:7d:24:d5:9a:67:3f:6e:75:39:55"]
      - configure_aws_image_w_nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_IP=$(curl -H "token: backend-ip-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID})
            echo $BACKEND_IP
            export API_URL=http://$BACKEND_IP:3030
            echo "API_URL=$API_URL" >> frontend/.env
      - run:
          name: "Baking backend API_URL into the front-end"
          command: |
              cat frontend/.env
              npm install webpack-dev-server -g
              cd frontend
              npm i
              npm run build
      - run:
          name: Deploy frontend objects
          command: |
            ls -a
            ls -a frontend
            aws s3 cp frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive             
      - when:
          condition: on_fail
          steps:
            - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:87:73:66:22:41:7d:24:d5:9a:67:3f:6e:75:39:55"]
      - attach_workspace:
          at: ~/project/.circleci/ansible/
      - run: cat ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --update ansible
      - run:
          name: Build backend
          command: |
            tar -czvf backend.tar.gz backend
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible/ && ansible-playbook -i inventory.txt deploy-backend.yml
      - when:
          condition: on_fail
          steps:
            - destroy-environment  

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt install curl
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: backend-ip-${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> .env
      - run:
          name: Backend smoke test.ls
          command: |
            echo "${API_URL}"
            curl "http://${API_URL}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      - when:
          condition: on_fail
          steps:
            - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
  
  test-docker-setup:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - configure_docker_image
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          # https://github.com/nodesource/distributions
          command: |
            sudo yum update
            curl -fsSL https://rpm.nodesource.com/setup_current.x | bash -
            yum install -y nodejs
  
  test-copy-to-ec2:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ba:87:73:66:22:41:7d:24:d5:9a:67:3f:6e:75:39:55"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs npm
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible/ && cat inventory.txt && ls -a && ansible-playbook -i inventory.txt deploy-backend.yml             

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      #     context: final_project_cicd
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: final_project_cicd
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          context: final_project_cicd
          
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     context: final_project_cicd         
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - store-backend-ip:
          context: final_project_cicd
          requires: [deploy-infrastructure]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
          context: final_project_cicd

      - deploy-frontend:
          requires: [run-migrations]
          context: final_project_cicd
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
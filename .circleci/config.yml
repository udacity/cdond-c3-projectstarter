#ZGFuaWVsYWJyYW9zdWJtaXNzaW9u
version: 2.1

commands:
  rollback_infrastructure:
    steps:
      - run:
          name: Rollback infrastructure resources
          command: |
            aws cloudformation delete-stack --stack-name udapeople-stack-network
            aws cloudformation delete-stack --stack-name udapeople-stack-backend
            aws cloudformation delete-stack --stack-name udapeople-stack-cloudfront
            aws cloudformation delete-stack --stack-name udapeople-stack-frontend
          when: on_fail

jobs:
  audit:
    docker:
      - image: node:12.18.1
    steps:
      - checkout
      - run:
          name: Audit frontend packages
          command: |
            cd frontend
            npm audit --audit-level=critical
      - run:
          name: Audit backend packages
          command: |
            cd backend
            npm audit --audit-level=critical
  frontend:
    docker:
      - image: node:12.18.1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test app
          command: |
            cd frontend
            npm run test
      - run:
          name: Build app
          command: |
            cd frontend
            npm run build
  backend:
    docker:
      - image: node:12.18.1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Build app
          command: |
            cd backend
            npm run build
      - run:
          name: Test app
          command: |
            cd backend
            npm run test
  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Implement network infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/network.yml \
              --stack-name udapeople-stack-network
      - run:
          name: Implement cloudfront infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudfront.yml \
              --stack-name udapeople-stack-cloudfront
            echo $MEMSTASH_TOKEN
            printenv
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
              --request PUT \
              --data "$(aws cloudformation describe-stacks --stack-name udapeople-stack-frontend --query 'Stacks[0].Outputs[0].OutputValue' --output text)" \
              https://api.memstash.io/values/websiteURL
      - run:
          name: Implement backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/backend.yml \
              --stack-name udapeople-stack-backend
            echo "[web]" > .circleci/ansible/inventory.txt
            export backendURL=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-production" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            echo $backendURL >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" \
              --request PUT \
              --data "http://${backendURL}:3030" \
              https://api.memstash.io/values/backendURL
      - run:
          name: Implement frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/frontend.yml \
              --stack-name udapeople-stack-frontend
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
  deploy_backend:
    docker:
      - image: python:3.7-alpine3.11
    shell: /bin/sh -leo pipefail
    working_directory: ~/project
    environment:
      - BASH_ENV: /etc/profile
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - add_ssh_keys:
          fingerprints: ["21:19:c0:15:0f:12:94:29:80:f0:01:51:c2:b3:e8:97"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            pwd
            ls -la
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt playbook.yml

  rebuild_frontend:
    docker:
      - image: node:12.18.1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Set frontend environment
          command: |
            export backendURL=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/backendURL)
            echo API_URL=$backendURL > "frontend/.env"
      - run:
          name: Rebuild frontend
          command: |
            cd frontend
            npm run build
      - persist_to_workspace:
          root: ~/project/
          paths:
            - frontend
  deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/project
      - run:
          name: Copy frontend files to s3 bucket
          command: |
            cd frontend
            ls
            cat .env
            aws s3 sync dist s3://udapeople-production/

  smoke_test:
    docker:
      - image: node:12.18.1
    steps:
      - run:
          name: Test backend
          command: |
            export backendURL=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/backendURL)
            if curl ${backendURL}/api/status | grep '"status":"ok"'
            then
              exit 0
            else
              echo 'Backend smoke test failed due to an invalid check'
              exit 1
            fi
      - run:
          name: Test frontend
          command: |
            export websiteURL=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/websiteURL)
            if curl -s ${websiteURL}/#/employees | grep 'Invalid'
            then
              exit 0
            else
              echo 'Front end smoke test failed due to an invalid check'
              exit 1
            fi
workflows:
  default:
    jobs:
      - deploy_infrastructure
      - deploy_backend:
          requires:
            - deploy_infrastructure
      - rebuild_frontend:
          requires:
            - deploy_backend
      - deploy_frontend:
          requires:
            - rebuild_frontend
      - smoke_test:
          requires:
            - deploy_backend
            - deploy_frontend


#      - audit
#      - frontend:
#          requires:
#            - audit
#      - backend:
#          requires:
#            - audit
#      - deploy_infrastructure:
#          requires:
#            - frontend
#            - backend
#      - configure_infrastructure:
#          requires:
#            - deploy_infrastructure

version: 2.1

orbs:
  slack: circleci/slack@3.4.2

commands:
  destroy-environment:
    parameters:
      stack-name:
        type: string
        default: StackName
    steps:
      - run:
          name: Destroy Environment
          command: |
            aws cloudformation delete-stack --stack-name << parameters.stack-name >>

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && build
          command: |
            cd frontend
            npm install 
            npm run build
      - slack/status:
          fail_only: true

  build-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && build
          command: |
            cd backend
            npm install 
            npm run build
      - slack/status:
          fail_only: true
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && run tests
          command: |
            cd frontend
            npm install
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true

  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && run tests
          command: |
            cd backend
            npm install 
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && run analyze
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          fail_only: true

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && run analyze
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          fail_only: true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create CloudFront Stack
          command: |
            aws cloudformation deploy \
              --template-file files/cloudfront.yml \
              --parameters WorkflowID=${CIRCLE_WORKFLOW_ID} \
              --stack-name cloud-devops-cloudfront-${CIRCLE_WORKFLOW_ID}
      - when:
          condition: on_fail
          steps:
            - destroy-environment:
              stack-name: cloud-devops-cloudfront-${CIRCLE_WORKFLOW_ID}

#  configure-infrastructure:

#  run-migrations:

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  # frontend:
  #   jobs:
  #     - build-frontend
  #     - test-frontend:
  #         requires:
  #             - build-frontend
  #     - scan-frontend:
  #         requires:
  #             - test-frontend
  # backend:
  #   jobs:
  #     - build-backend
  #     - test-backend:
  #         requires:
  #           - build-backend
  #     - scan-backend:
  #         requires:
  #           - test-backend
  infrastructure:
    jobs:
      - deploy-infrastructure

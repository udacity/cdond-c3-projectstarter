version: 2.1

orbs:
  slack: circleci/slack@3.4.2
  python: circleci/python@1.0.0

commands:
  create-env-file:
    description: Command used for creating backend environment file
    steps:
      - run:
          name: Add values to backend/env file
          command: |
            echo "NODE_ENV=local" >> backend/env
            echo "VERSION=1" >> backend/env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env

  destroy-environment:
    description: Command used for destroying the CloudFormation Stack
    parameters:
      stack-name:
        type: string
        default: StackName
    steps:
      - run:
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name << parameters.stack-name >>
#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && build
          command: |
            cd frontend
            npm install 
            npm run build
      - slack/status:
          fail_only: true

  build-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && build
          command: |
            cd backend
            npm install 
            npm run build
      - slack/status:
          fail_only: true
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && run tests
          command: |
            cd frontend
            npm install
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true

  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && run tests
          command: |
            cd backend
            npm install 
            npm run test -- --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: /tmp/reports/junit/
      - store_test_results:
          path: /tmp/reports/junit/
      - slack/status:
          fail_only: true

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Frontend -> npm install && run analyze
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          fail_only: true

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Backend -> npm install && run analyze
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
      - slack/status:
          fail_only: true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create Backend Stack
          command: |
            aws cloudformation create-stack \
            --template-body file://.circleci/files/backend.yml \
            --stack-name cloud-devops-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add Backend EC2 Instance DNS Name to Ansible Inventory
          when: on_success
          command: |
            sleep 60
            BACKEND_DNS_NAME=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text)
            if [ -z "$BACKEND_DNS_NAME" ]; then
              echo "BACKEND_DNS_NAME is empty"
              exit 1
            fi
            echo ${BACKEND_DNS_NAME} >> .circleci/ansible/inventory
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory
      - destroy-environment:
          stack-name: cloud-devops-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Create Frontend Stack
          command: |
            aws cloudformation create-stack \
            --template-body file://.circleci/files/frontend.yml \
            --stack-name cloud-devops-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameters ParameterKey=ID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          stack-name: cloud-devops-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Create CloudFront Stack
          command: |
            aws cloudformation create-stack \
              --template-body file://.circleci/files/cloudfront.yml \
              --stack-name cloud-devops-cloudfront-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          stack-name: cloud-devops-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}
      - slack/status:
          fail_only: true

  configure-infrastructure:
    executor: python/default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints:
            - "51:3c:9b:f2:e2:b8:53:fe:5c:95:be:ea:ff:85:40:42"
      - run:
          name: Install Ansible
          command: |
            pip install ansible==2.9.12
            ansible --version
      - run:
          name: Run ansible-playbook for backend server
          command: | # Remove below line once you've got stuff working
            echo "ec2-34-212-122-198.us-west-2.compute.amazonaws.com" >> .circleci/ansible/inventory
            cd .circleci/ansible
            ansible -u ubuntu -m ping backend
            ansible-playbook server-configuration.yaml
      - slack/status:
          fail_only: true

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - create-env-file
      - run: echo "This is pipeline ID << pipeline.id >>"
      - run:
          name: Backend -> Run migrations
          command: |
            cd backend
            npm run migrations > migrations.txt
            cat migrations.txt
      - slack/status:
          fail_only: true

#  deploy-frontend:

#  deploy-backend:  

#  smoke-test:

#  cloudfront-update:

workflows:
  # frontend:
  #   jobs:
  #     - build-frontend
  #     - test-frontend:
  #         requires:
  #             - build-frontend
  #     - scan-frontend:
  #         requires:
  #             - test-frontend
  # backend:
  #   jobs:
  #     - build-backend
  #     - test-backend:
  #         requires:
  #           - build-backend
  #     - scan-backend:
  #         requires:
  #           - test-backend

  # infrastructure:
  #   jobs:
  #     - deploy-infrastructure:
  #         requires:
  #             - frontend
  #             - backend
  #     - configure-infrastructure:
  #         requires:
  #           - deploy-infrastructure
  
  migrations:
    jobs:
      - run-migrations
